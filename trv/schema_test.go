package trv

import (
	"reflect"
	"testing"
)

func Test_schema_parse(t *testing.T) {
	tests := []struct {
		name            string
		s               schema
		wantDescription string
		wantColumns     []Column
	}{
		{
			name: "",
			s: `
# users
## Description

ユーザーを管理するテーブル

## Columns

| Name | Type | Default | Nullable | Extra Definition | Children | Parents | Comment | Labels |
| ---- | ---- | ------- | -------- | ---------------- | -------- | ------- | ------- | ------ |			
| id | int |  | false | auto_increment | [comment_stars](comment_stars.md) [comments](comments.md) [posts](posts.md) [user_options](user_options.md) [logs](logs.md) |  | ユーザーID |  |
## Constraints
| Name | Type | Definition |
| ---- | ---- | ---------- |
| email | UNIQUE | UNIQUE KEY email (email) |
| PRIMARY | PRIMARY KEY | PRIMARY KEY (id) |
| username | UNIQUE | UNIQUE KEY username (username) |
## Indexes
| Name | Definition |
| ---- | ---------- |
| PRIMARY | PRIMARY KEY (id) USING BTREE |
| email | UNIQUE KEY email (email) USING BTREE |
| username | UNIQUE KEY username (username) USING BTREE |
## Relations
![er](users.svg)
---
> Generated by [tbls](https://github.com/k1LoW/tbls)
`,
			wantDescription: "ユーザーを管理するテーブル",
			wantColumns: []Column{
				{
					Name:    "id",
					Type:    "int",
					Comment: "ユーザーID",
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotDescription, gotColumns := tt.s.parse()
			if gotDescription != tt.wantDescription {
				t.Errorf("schema.parse() gotDescription = %v, want %v", gotDescription, tt.wantDescription)
			}
			if !reflect.DeepEqual(gotColumns, tt.wantColumns) {
				t.Errorf("schema.parse() gotColumns = %v, want %v", gotColumns, tt.wantColumns)
			}
		})
	}
}
